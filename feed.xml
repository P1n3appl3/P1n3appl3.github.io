<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://josephryan.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://josephryan.me/" rel="alternate" type="text/html" /><updated>2018-11-13T06:28:07+00:00</updated><id>https://josephryan.me/</id><title type="html">Joseph Ryan</title><subtitle>A personal website to host my portfolio and blog</subtitle><entry><title type="html">Trying out Arch</title><link href="https://josephryan.me/arch/" rel="alternate" type="text/html" title="Trying out Arch" /><published>2018-10-13T00:00:00+00:00</published><updated>2018-10-13T00:00:00+00:00</updated><id>https://josephryan.me/arch</id><content type="html" xml:base="https://josephryan.me/arch/">&lt;p&gt;A year ago I’d just started college and a bunch of things were changing for me, one of which was my laptop. After a pretty awful experience running linux in a VM because a robotics project required it, I took the plunge and dual booted Ubuntu. Up until that point my only linux experience was the bare minimum I needed to configure Raspberry Pis, so I was worried that it would be a jarring experience. However to my surprise Ubuntu was as user friendly as it gets; I don’t remember having any problems getting started. I think my favorite part was getting a proper package manager; having a homogeneous and reliable process for installing and updating software is a bigger deal than I’d realized.&lt;/p&gt;

&lt;p&gt;I was so happy with linux that I shrunk my Windows partition as much as possible (we used LabView for one of my courses and it wasn’t available for linux, so I couldn’t completely eradicate it). I also left Windows on my desktop because I use it for gaming, and being incompatible with games is one of the most common complaints I heard about Linux (the most common being driver support). I should mention that my roommate Vivek was going through pretty much the same process as me, a few steps ahead due to his prior experience with OSX. I got fairly comfortable with Ubuntu and moved on to other endeavors like learning Vim. Vivek was more interested in tinkering with his OS and soon he switched to Arch Linux.&lt;/p&gt;

&lt;p&gt;All I knew about Arch at that point was that it was a much more bare-bones distribution and it had a very involved user-base. I had all sorts of fun jeering Vivek as he struggled to make basic things work like controlling the GPU or making the laptop go to sleep, but as time went on he talked less about the ridiculous problems he had and more about the cool features and tools he was learning to use. Over the summer one of my coworkers (who coincidentally used to work at Canonical, the company behind Ubuntu) taught me more about the Linux ecosystem and introduced me to some other distros and OS’s. That was the tipping point for me, and when this semester started I decided I’d try something new. I narrowed the choices down to Arch and NixOS, but the latter isn’t as popular/well supported and Vivek wouldn’t be able to help me with it. So a few days ago (when I should have been studying) I opened up the Arch wiki and with Vivek holding my hand I managed to get up and running on a spare SSD in a single night. I used my desktop this time because I’ve been convinced that almost every game I play will run just fine on linux, and I didn’t want to interrupt my Ubuntu environment so I could still do my homework if things went south.&lt;/p&gt;

&lt;p&gt;Right off the bat the difference from Ubuntu was apparent. Instead of just running a GUI installer off a flash drive, I had to manually create and format partitions on the hard drive. Then I booted Arch from a flash drive and after setting up the filesystem on the SSD I jumped into it (honestly I still have no idea how this part worked, I typed &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; and voila now I’m running out of the other drive). I started setting up essential stuff like the bootloader and network configuration. I was surprised by how piecemeal the process seemed, at every step I could choose several programs to do a task with their own benefits and drawbacks. It was quite overwhelming to be presented with 15 packages that do the same basic function, with different levels of configurability, stability, performance, and elegance.&lt;/p&gt;

&lt;p&gt;Getting over the initial usability hump to get a shell, editor, and web browser running, took &lt;em&gt;much&lt;/em&gt; longer than with Ubuntu, but I kind of enjoyed the process. The “batteries not included” nature of Arch means that instead of having huge swaths of software installed by default, you have to build up your system piece by piece to get the functionality you want. This obviously takes more work, but means that you better understand your setup once you’ve got it working. That understanding has already helped me a few times when debugging. On Windows if an OS feature didn’t do what I wanted, I was powerless to change it. On Ubuntu there was a 50/50 chance that someone had posted a script or modification to a config file on stack overflow and an even lower chance that it actually worked for me. In Arch, through a combination of the &lt;em&gt;amazing&lt;/em&gt; documentation the community puts together and my enhanced understanding of my own system, I feel like I can actually &lt;em&gt;fix&lt;/em&gt; things! Seriously, the Arch wiki is an amazing resource not just for Arch but Linux as a whole. It’s invaluable especially when using new tools where the &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; option is too terse, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; page is too verbose.&lt;/p&gt;

&lt;p&gt;Yesterday when I noticed that the time in my status bar was wrong I consulted the wiki and was able to figure out the problem (incorrectly configured NTP client) with minimal frustration. In addition to the great documentation, I’m sure it helped that I had set up both the status bar and the underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; config myself. In addition to debugging, adding features is also a breeze compared to my previous setups. I wanted to set up screenshots and clips, so I checked the arch wiki for screen capture software (there are literally 19 listed packages not counting ones that do video) and picked a straightforward one called &lt;code class=&quot;highlighter-rouge&quot;&gt;maim&lt;/code&gt;. When ran it just captures the screen and either spits the png out over &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; or saves it to a file if you give it a path. I wanted to both save the picture &lt;em&gt;and&lt;/em&gt; copy it to my clipboard so I piped it to &lt;code class=&quot;highlighter-rouge&quot;&gt;tee ~/screenshots/$(date +%s).png&lt;/code&gt; and piped &lt;em&gt;that&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;xclip&lt;/code&gt; to put it in my clipboard. Finally I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;xev&lt;/code&gt; to find the id of my &lt;code class=&quot;highlighter-rouge&quot;&gt;PrnSc&lt;/code&gt; key, and added a binding in my window manager that ran the whole command when I pressed it. At this point I felt like a sorcerer and ate a piece of pumpkin bread to celebrate. The thing to note is that I didn’t just copy a one-liner off a forum and forget about it, I used separate programs (&lt;code class=&quot;highlighter-rouge&quot;&gt;maim&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tee&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xclip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xev&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bindsym&lt;/code&gt;) and composed them together to do my bidding. I’d always heard people touting that composability as Unix’s greatest feature, but I’m still so new to it that I don’t appreciate that all the time.&lt;/p&gt;

&lt;p&gt;Of course you could look at it another way: I just spent an hour replicating a feature that works out of the box in any respectable OS. That’s a fair point, but first of all it was fun :stuck_out_tongue_winking_eye:, but I also think knowing how it works has real benefits. After I got it working, it was easy to add a binding for “Shift+PrtSc” that let me select a region instead of capturing the whole screen. I distinctly remember in windows having to launch the snip tool, and in Ubuntu launching the screenshot tool and then picking the option for “select region”. I’m sure there are ways to do what I want in both cases, but when you’re provided with tools that mostly work, it takes a lot more motivation to modify them.&lt;/p&gt;

&lt;p&gt;At the end of the day, configurability is my favorite “feature” of Arch (well that and the AUR). I’m the kind of person who loves endlessly tweaking settings and the control that Arch gives me to do that is amazing. I’ve spent a dozen hours since installing it just picking and choosing different components to use for things like window management, notifications, status bar, program launching, etc. and there are still a few big kinks I need to iron out. After that there’s the never ending minutia of optimizing my workflow and making stuff look pretty. I’ll do another write up with the details of my configuration once it’s stable. Then maybe I can get back to you know… actually using my computer.&lt;/p&gt;</content><author><name></name></author><category term="arch" /><category term="linux" /><summary type="html">A year ago I’d just started college and a bunch of things were changing for me, one of which was my laptop. After a pretty awful experience running linux in a VM because a robotics project required it, I took the plunge and dual booted Ubuntu. Up until that point my only linux experience was the bare minimum I needed to configure Raspberry Pis, so I was worried that it would be a jarring experience. However to my surprise Ubuntu was as user friendly as it gets; I don’t remember having any problems getting started. I think my favorite part was getting a proper package manager; having a homogeneous and reliable process for installing and updating software is a bigger deal than I’d realized.</summary></entry><entry><title type="html">The Rust community rocks!</title><link href="https://josephryan.me/rustaceans/" rel="alternate" type="text/html" title="The Rust community rocks!" /><published>2018-07-21T00:00:00+00:00</published><updated>2018-07-21T00:00:00+00:00</updated><id>https://josephryan.me/rustaceans</id><content type="html" xml:base="https://josephryan.me/rustaceans/">&lt;p&gt;A couple of weeks ago my friend showed me &lt;a href=&quot;https://github.com/japaric/libm&quot;&gt;libm&lt;/a&gt;, a port of the math library from musl (a re-implementation of the C standard library) to “nostd” Rust which is just Rust with no external dependencies (even the standard library). The coolest part: it wasn’t written yet! The maintainer, @japaric had set up a bunch of “help wanted” and “good first issue” issues, and the tasks were fairly compartmentalized because each one involved porting a single math function like &lt;code class=&quot;highlighter-rouge&quot;&gt;atan2f&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt;. As someone who’s always been interested in open source software, but never actually contributed, it looked like a great opportunity and I got right to work.&lt;/p&gt;

&lt;p&gt;One of the hurdles to contributing to a project is the difficulty of setting up your environment, but a combination of japaric’s beginner friendly &lt;a href=&quot;https://github.com/japaric/libm/blob/master/CONTRIBUTING.md&quot;&gt;contributing gude&lt;/a&gt; and cargo being amazing made it a breeze. I uncommented one line of code and unit tests for the function I was working on magically appeared thanks to some &lt;a href=&quot;https://github.com/japaric/libm/blob/master/musl-generator/src/macros.rs&quot;&gt;macro magic&lt;/a&gt;. After fumbling around with my basic knowledge of Rust I finally got &lt;code class=&quot;highlighter-rouge&quot;&gt;fmod&lt;/code&gt; working and made a PR. Even though it had merge conflicts, I didn’t run &lt;code class=&quot;highlighter-rouge&quot;&gt;rustfmt&lt;/code&gt;, and I didn’t squash my commits, no one made fun of my incompetence. Japaric left helpful comments, and a few fixes later I had merged my code! High off that success I implemented more functions over the next few evenings, and there were enough other people contributing that within the week we had finished all but a few difficult functions. I’ve been checking in on it since, and it looks like it may get used in the &lt;code class=&quot;highlighter-rouge&quot;&gt;core&lt;/code&gt; crate.&lt;/p&gt;

&lt;p&gt;I always had this idea that open source contributors were superhuman programmers and it made me apprehensive about trying to do it myself, but my experience with libm has showed me that I had nothing to be afraid of. The largest factor that made the process so welcoming was the kindness of the rest of the contributors. For a self concious newbie like myself, I could have been scared away very easily by someone calling out my obvious inexperience while commenting on PRs. I hate that some of the most famous open source discourse out there is Torvalds yelling at people on the LKML. I realize how silly it sounds, but I was terrified of being made fun of for my numerous mistakes.&lt;/p&gt;

&lt;p&gt;I’ve heard great things about the Rust community, now I can say from firsthand experience that they were right. I joined the Rust Discord server and it’s been refreshing to watch a bunch of strangers on the internet treat each other with respect. Programming is a collaborative process, even when working by yourself you consult documentation and Stack Overflow so having a community that cares about each other isn’t just heartwarming, it’s productive. More people having their questions answered nicely means more people getting better at the language means more people contributing to open source. The Rust community seems to understand this well, the &lt;a href=&quot;https://this-week-in-rust.org/&quot;&gt;weekly newsletter&lt;/a&gt; has a list of open source projects that need help and are good for beginners.&lt;/p&gt;

&lt;p&gt;I can’t wait to jump back in and find another Rust project that wants help. In the meantime, since I can use complex math in nostd projects now thanks to libm, maybe I’ll go port &lt;a href=&quot;/cubefield&quot;&gt;cubefield&lt;/a&gt; to Rust.&lt;/p&gt;</content><author><name></name></author><category term="rust" /><summary type="html">A couple of weeks ago my friend showed me libm, a port of the math library from musl (a re-implementation of the C standard library) to “nostd” Rust which is just Rust with no external dependencies (even the standard library). The coolest part: it wasn’t written yet! The maintainer, @japaric had set up a bunch of “help wanted” and “good first issue” issues, and the tasks were fairly compartmentalized because each one involved porting a single math function like atan2f or pow. As someone who’s always been interested in open source software, but never actually contributed, it looked like a great opportunity and I got right to work.</summary></entry><entry><title type="html">So it begins…</title><link href="https://josephryan.me/first/" rel="alternate" type="text/html" title="So it begins..." /><published>2018-07-04T00:00:00+00:00</published><updated>2018-07-04T00:00:00+00:00</updated><id>https://josephryan.me/first</id><content type="html" xml:base="https://josephryan.me/first/">&lt;p&gt;I’ve spent the past few days learning about the jekyll ecosystem, and I think that I finally have a good enough lay of the land to get my site up and running. Trawling through the myriad of themes, plugins, and deployment methods is rather exhausting, so I’m going to document the process in hopes that I’ll never have to do it again.&lt;/p&gt;

&lt;h2 id=&quot;theme&quot;&gt;Theme&lt;/h2&gt;
&lt;p&gt;Because content is irrelevant and what really matters is having a neat looking website, the most important decision is choice of theme. I want something clean and dark, and after agonizing over a bunch of choices I’ve picked @sharu725’s &lt;a href=&quot;https://github.com/sharu725/dark-side&quot;&gt;dark-side&lt;/a&gt; theme. My other favorite from the ones I considered is &lt;a href=&quot;https://github.com/streetturtle/jekyll-clean-dark&quot;&gt;clean-dark&lt;/a&gt; by @streetturtle. The latter is definitely more full featured, but I want to be able to understand most of what’s going on in my site so I’m going with the simplest option that still looks good. The nice thing about understanding it is that I can tweak things. So far I’ve changed a few lines of css to make the accent color a nice shade of blue and altered the way that headers are rendered. I’m also trying to change the mobile tab color, but I can’t really test that until this goes live. (update: it works at least on android with chrome)&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;My theme came with disqus comments and google analytics built in. Any other features I want will come from the huge collection of jekyll plugins. The worst part is that there are usually several plugins that do the exact same thing, so I have to pay more attention to make sure I’m getting the most elegant/modern/working/featureful one.&lt;/p&gt;

&lt;h3 id=&quot;inline-code-highlighting&quot;&gt;Inline code highlighting&lt;/h3&gt;

&lt;p&gt;Jekyll already has support for syntax highlighting, however it forces all code to go in a new paragraph like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. Check out this really long line of text which hopefully wraps correctly on mobile or at least scrolls correctly!&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would be annoying if I had a bunch of short code snippets that I wanted to highlight, so I got a plugin that lets me do it like this instead: &lt;code class=&quot;highlight language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;. I wish I could just use backticks instead of liquid for code segments, and I may try to add that in the future.&lt;/p&gt;

&lt;h3 id=&quot;github--mentions&quot;&gt;Github @ mentions&lt;/h3&gt;

&lt;p&gt;I already used this one to mention the theme designers above. This way I can reference cool people like @jvns and @pervognsen with links to their github profiles instead of having to track down their personal sites.&lt;/p&gt;

&lt;h3 id=&quot;jemoji-pineapple&quot;&gt;Jemoji :pineapple:&lt;/h3&gt;

&lt;p&gt;This lets me specify emoji the same way you would in slack like :emoji-name:. Now I can express how angry I am about my favicon not displaying properly… :rage:. There’s also &lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;this nice gist&lt;/a&gt; that I can use to look up a specific one if I forget it.&lt;/p&gt;

&lt;h3 id=&quot;responsive-images&quot;&gt;Responsive images&lt;/h3&gt;

&lt;p&gt;I remember when working on my &lt;a href=&quot;https://web.archive.org/web/20180704224759/http://www.josephryan.me/&quot;&gt;old website&lt;/a&gt; it was a pain to optimize all my images. This plugin does all the resizing at build time so that you can spend less time watching a page load and more time looking at my cats:&lt;/p&gt;
&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-551by388-8c857e.jpg&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-551by388-8c857e.jpg&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-551by388-8c857e.jpg&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-450by317-8c857e.jpg&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-525by300-8c857e.jpg&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-350by200-8c857e.jpg&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/cats-350by200-8c857e.jpg&quot; class=&quot;center&quot; itemprop=&quot;image&quot; alt=&quot;cats&quot; title=&quot;It also lets you add alt text!&quot; /&gt;
  &lt;/picture&gt;

&lt;h3 id=&quot;sitemap-and-feed&quot;&gt;Sitemap and feed&lt;/h3&gt;

&lt;p&gt;Apparently sitemap makes it easier for search engines to index the contents of the site, and it was trivial to add so why not. Same reasoning for the RSS feed, the plugin doesn’t need any configuration and there’s a chance it’ll be useful to someone.&lt;/p&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;There are a few other plugins I’ve played with and decided to leave out for now. I’ll list them here in case I change my mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-time-to-read estimates reading time of a post&lt;/li&gt;
  &lt;li&gt;jekyll-timeago represents absolute dates relatively&lt;/li&gt;
  &lt;li&gt;jekyll-avatar shows github avatars&lt;/li&gt;
  &lt;li&gt;jekyll-algolia site-wide search&lt;/li&gt;
  &lt;li&gt;jekyll_indextank another search plugin&lt;/li&gt;
  &lt;li&gt;jekyll-target-blank opens links in a new tab&lt;/li&gt;
  &lt;li&gt;jekyll-gist embeds gists… duh&lt;/li&gt;
  &lt;li&gt;jekyll-asciinema take a wild guess&lt;/li&gt;
  &lt;li&gt;jekyll-youtube you get the idea&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;At first it sounds really cool that you can just push your markdown to github and let them handle all of the site generation, but then I realized that they (understandably)  won’t run 99% of plugins so they aren’t exposed to arbitrary code. I was about to resign myself to just generate it locally and push the entire static site to github, but someone (&lt;em&gt;cough&lt;/em&gt; @rrbutani &lt;em&gt;cough&lt;/em&gt;) told me about using Travis CI to build it, and who can resist the allure of free compute. It also can do nice things like blocking an update if you introduce broken links.&lt;/p&gt;

&lt;p&gt;Despite how much time I spent configuring everything, I’m still impressed by how easy it was to get a functional personal site that looks better than Stallman’s ever will. The best part is that the combination of jekyll + travis + disqus + github pages + namecheap’s edu program lets me run my site completely for free (I do have to pay for the domain after the free year is up but that’s like the cost of dinner for another year)&lt;/p&gt;</content><author><name></name></author><category term="meta" /><summary type="html">I’ve spent the past few days learning about the jekyll ecosystem, and I think that I finally have a good enough lay of the land to get my site up and running. Trawling through the myriad of themes, plugins, and deployment methods is rather exhausting, so I’m going to document the process in hopes that I’ll never have to do it again.</summary></entry></feed>