<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://josephryan.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://josephryan.me/" rel="alternate" type="text/html" /><updated>2019-08-15T07:23:46+00:00</updated><id>https://josephryan.me/feed.xml</id><title type="html">Joseph Ryan</title><subtitle>A personal website to host my portfolio and blog</subtitle><entry><title type="html">Writing a raytracer in rust</title><link href="https://josephryan.me/ray-rust/" rel="alternate" type="text/html" title="Writing a raytracer in rust" /><published>2019-02-28T00:00:00+00:00</published><updated>2019-02-28T00:00:00+00:00</updated><id>https://josephryan.me/ray-rust</id><content type="html" xml:base="https://josephryan.me/ray-rust/">&lt;p&gt;I’ve wanted to write a raytracer ever since I first learned what they were, and now I’ve finally done it! It would probably be more accurate to say that I copied a raytracer out of a &lt;a href=&quot;http://www.realtimerendering.com/raytracing/Ray%20Tracing%20in%20a%20Weekend.pdf&quot;&gt;book&lt;/a&gt; and translated it from c++ to rust, but that sounds far less fun than it actually was. At first it made me want to write about raytracing, but it turns out that there are like &lt;em&gt;50 years&lt;/em&gt; of literature on the subject and I kept finding things that were essentially what I wanted to write but better. If you’re interested in reading about it I’d recommend you try &lt;a href=&quot;https://github.com/P1n3appl3/ray/#resources&quot;&gt;some of the things I read along the way&lt;/a&gt;. Also I haven’t been thinking too deeply about all the graphics stuff because of how little I know about the subject, it’s more like: &lt;em&gt;read book chapter/blog post/academic paper&lt;/em&gt; -&amp;gt; &lt;em&gt;implement thing I read about&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Instead I want to record my experience with using rust for the project. I think that writing a few thousand lines of code for this has pushed me over the edge in terms of feeling at home and productive in the language. There were some things that made me fall more in love with it, and some that made me pull my hair out because they shouldn’t be so difficult, and I’m just going to share as many of those as I can remember in no particular order.&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/teapot-500by500-d064eb.png&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/teapot-500by500-d064eb.png&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/teapot-500by500-d064eb.png&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/teapot-450by450-d064eb.png&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/teapot-500by286-d064eb.png&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/teapot-350by200-d064eb.png&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/renders/teapot-350by200-d064eb.png&quot; class=&quot;center&quot; itemprop=&quot;image&quot; title=&quot;Utah teapot in a Cornell box&quot; /&gt;
  &lt;/picture&gt;

&lt;h2 id=&quot;option&quot;&gt;Option&lt;/h2&gt;
&lt;p&gt;The joy of grokking &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt; and the related combinators was amazing, and I’m still not over it. I feel warm and fuzzy every time I express my intent clearly and safely with &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;*T&lt;/code&gt;(which might be null). A lot of things I like about rust are trade-offs or stylistic differences, but I’m pretty convinced that this abstraction is objectively better than nullable references in every way.&lt;/p&gt;

&lt;h2 id=&quot;tuples&quot;&gt;Tuples&lt;/h2&gt;
&lt;p&gt;This is more of a quality of life thing, but because I was translating a lot of c++ code I kept running into the annoyance of function signatures that use “out-parameters”. This is where some arguments are mutable references that are used to contain the result of the function. In rust having first class tuples to return arbitrary data from functions is so much nicer. I know “modern idiomatic” c++ probably has tuples and you’re supposed to make “input” arguments constant references so it’s easier to tell the difference, but the c++ I’ve had to deal with and the examples in this book were pretty much “c plus classes” so I spent more time than I should have figuring out which params were which.&lt;/p&gt;

&lt;h2 id=&quot;crate-ecosystem&quot;&gt;Crate Ecosystem&lt;/h2&gt;
&lt;p&gt;I didn’t use many external dependencies, but when I did they worked painlessly and were well documented (rustdoc having a great interface definitely helped). When I wanted to include a new library all it took was 1 line in my &lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; and it was downloaded from &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; on the next build. Coming from python and c++ it’s refreshing to not have to manually tinker with the package manager or build system to set up dependencies, not to mention confusing linker flags or creating isolated language environments for every project.&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/refraction-800by200-a760cb.png&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/refraction-700by175-a760cb.png&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/refraction-675by169-a760cb.png&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/refraction-450by113-a760cb.png&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/refraction-350by200-a760cb.png&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/refraction-350by200-a760cb.png&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/renders/refraction-350by200-a760cb.png&quot; class=&quot;center&quot; itemprop=&quot;image&quot; title=&quot;Different indices of refraction&quot; /&gt;
  &lt;/picture&gt;

&lt;h2 id=&quot;iterators-and-data-parallelism&quot;&gt;Iterators and Data Parallelism&lt;/h2&gt;
&lt;p&gt;Ray tracing happens to be an incredibly good candidate for parallelization. Since the act of computing a ray bounce doesn’t modify the scene each individual ray can be computed in parallel (in reality it makes more sense parallelize over regions of the image because there’s no way you’d have enough cores to do every ray in parallel). The example from rayon’s README where “you just change your &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.iter()&lt;/code&gt; call into &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.par_iter()&lt;/code&gt;, and Rayon does the rest” seems too good to be true but that’s &lt;a href=&quot;https://github.com/P1n3appl3/ray/commit/00a276178a9aca963b71a6a3b919afaf5907e4f9#diff-639fbc4ef05b315af92b4d836c31b023R62&quot;&gt;literally what I did&lt;/a&gt; and got a huge speedup.&lt;/p&gt;

&lt;h2 id=&quot;traits&quot;&gt;Traits&lt;/h2&gt;
&lt;p&gt;Traits feel like they encourage code reuse more than the multiple inheritance systems I’m used to. Being able to implement my &lt;code class=&quot;highlighter-rouge&quot;&gt;Texture&lt;/code&gt; trait for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; type from an external crate without modifying its definition feels awesome. I was a bit disappointed when I learned that you couldn’t implement foreign traits on foreign types but I’ve since read up on &lt;em&gt;why&lt;/em&gt; this doesn’t work in rust’s current type system and how to use the newtype pattern to circumvent it. I also had a considerable amount of friction with the numeric traits and am still not happy with how I ended up using them to create generic 3D vectors. I’m sure if I used something like &lt;a href=&quot;https://github.com/rustsim/nalgebra&quot;&gt;nalgebra&lt;/a&gt; or &lt;a href=&quot;https://github.com/rustgd/cgmath&quot;&gt;cgmath&lt;/a&gt; I would have been fine, but I was trying to make both the implementation &lt;em&gt;and&lt;/em&gt; interface of my hand-rolled solution &lt;a href=&quot;https://github.com/porglezomp/cgl/blob/master/math/src/vec.rs&quot;&gt;aesthetically pleasing&lt;/a&gt;, which was a lot more difficult than I’d assumed.&lt;/p&gt;

&lt;h2 id=&quot;docs&quot;&gt;Docs&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://doc.rust-lang.org/std/option/index.html&quot;&gt;language docs&lt;/a&gt; and &lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;the book&lt;/a&gt; are great resources. The only gripe I have is that old versions of them are still the highest search results for a lot of things and it’s frustrating to have to click through a link or two and read messages like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The second edition of the book is no longer distributed with Rust’s documentation. If you came here via a link or web search, you may want to check out the current version of the book instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I guess they don’t want to break links to the old docs, but I’d love it if they just automatically redirected you to the current versions. Also while I was working on the project, the reworked module system landed and I spent quite some time confused due to reading outdated code and docs.&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/reflection-800by200-57ec67.png&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/reflection-700by175-57ec67.png&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/reflection-675by169-57ec67.png&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/reflection-450by113-57ec67.png&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/reflection-350by200-57ec67.png&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/reflection-350by200-57ec67.png&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/renders/reflection-350by200-57ec67.png&quot; class=&quot;center&quot; itemprop=&quot;image&quot; title=&quot;Varying 'roughness' of reflective surfaces&quot; /&gt;
  &lt;/picture&gt;

&lt;h2 id=&quot;file-organization&quot;&gt;File Organization&lt;/h2&gt;
&lt;p&gt;One of the things I’m still figuring out is how to organize my code. There don’t seem to be consistent conventions in the rust I’ve read about what order to put struct definitions, trait impls, util functions, public/private things, macros, etc. or when to split things into multiple files. I’d love a rust style guide or something to give guidelines about ways to make my code more readable.&lt;/p&gt;

&lt;h2 id=&quot;performance-optimization&quot;&gt;Performance Optimization&lt;/h2&gt;
&lt;p&gt;Since a good deal of my time went to making my raytracer run faster, I got to try out some of the profiling solutions for rust. It may just be my inexperience with profiling in general but to me this seemed like one of the weakest parts of the ecosystem. Benchmarking was fine and worked similarly to writing unit tests, but once it came to improving those numbers I was pretty stuck. I tried a few tracing tools and generated &lt;a href=&quot;https://github.com/ferrous-systems/flamegraph&quot;&gt;flamegraphs&lt;/a&gt; but I got conflicting results between tools and it was hard to understand the output. I couldn’t manage to get LLVM’s profile guided optimization working either. Besides parallelization and algorithmic improvements I tried incorporating SIMD to speed up vector math but it surprisingly made some operations much slower. Similarly I got improvements as well as regressions by switching between passing small structs like &lt;code class=&quot;highlighter-rouge&quot;&gt;Vec3&lt;/code&gt; around by value or reference.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;
&lt;p&gt;Most people agree that tests on the whole are a good thing. The issue is that I am lazy and if I feel like something is just &lt;em&gt;good&lt;/em&gt; and not &lt;em&gt;necessary&lt;/em&gt; then it probably won’t happen a lot of the time. Hopefully I’ll have enough experiences where a test helps me find a bug while writing something that I’ll realize how necessary they really are. I’m not there yet, but I’ve gotten to the point where I at least write tests to cover the breaking behavior while debugging, and rust makes the process absolutely painless. Not having to install extra things or write more than a handful of lines of boilerplate makes a world of difference when you’re lazy. All this being said I’ve only ever really done unit testing, so I’m not sure what integration testing and mocking are like in rust. I’m mostly used to the &lt;a href=&quot;https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock&quot;&gt;magical&lt;/a&gt; libraries in dynamic languages that make mocking super ergonomic, I hope rust can use macros or something to achieve similar ease of use.&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/thenextweek-600by600-ce394a.png&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/thenextweek-600by600-ce394a.png&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/thenextweek-600by600-ce394a.png&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/thenextweek-450by450-ce394a.png&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/thenextweek-525by300-ce394a.png&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/thenextweek-350by200-ce394a.png&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/renders/thenextweek-350by200-ce394a.png&quot; class=&quot;center&quot; itemprop=&quot;image&quot; title=&quot;Demo of lots of features&quot; /&gt;
  &lt;/picture&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Cargo has more up it’s sleeve than &lt;em&gt;just&lt;/em&gt; being a great build system, package manager, testing framework, etc. It also happens to have a nice facility for writing example code. In my raytracer I kind of abused this feature to get multiple binaries, but I still think it’s neat. Essentially I would write each 3D scene as an example program (all that means is putting the file in a directory called examples) and then I could do &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo run --release --example name_of_some_scene&lt;/code&gt;. Reading over a bunch of other peoples implementations of this project I kept finding huge commented out blocks in their &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; to change which scene to render and I’m glad I was able to avoid that with examples. As a side note: “features” were another thing that saved me from a bunch of uncommenting and re-commenting code blocks. I was able to turn on or off multi-threading and HDR output with just a flag, doing conditional compilation without C style macros is great! Speaking of which…&lt;/p&gt;

&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;
&lt;p&gt;I tend to go overboard when it comes to trying to make my code terse, especially definitions, and I went back and forth for a while on how to define the 3D scenes I’d render. The main choice was between doing it in code and doing it in some sort of configuration file. The latter seemed preferable because I could have lots of control over the syntax but after a few failed attempts to abuse deserialization to come up with an elegant config format I gave up on that and just wrote the scenes manually in rust. I wasn’t satisfied this and eventually tried to write some macros to shorten the construction of big nested objects. I especially didn’t like that I had to worry about wrapping stuff in &lt;code class=&quot;highlighter-rouge&quot;&gt;Box&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Arc&lt;/code&gt; and converting integers to floats when I really just wanted to be thinking about how to position shapes in the scene. I was pretty scared of the weird syntax but they really weren’t as complicated as they seemed and it solved the problem pretty well, instead of:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Prism&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;330&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mf&quot;&gt;19.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;265&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;295&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can write:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;translate!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;rotate!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;prism!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;165&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;265&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;295&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While it’s not a huge difference, it made me feel a bit better about writing scenes in code. I’m still interested in trying procedural macros to do spicier things than just pattern matching and substituting symbols for other ones, but creating a full blown DSL for this project wasn’t something I was interested in.&lt;/p&gt;

&lt;h2 id=&quot;the-tough-bits&quot;&gt;The tough bits&lt;/h2&gt;
&lt;p&gt;There are &lt;a href=&quot;https://github.com/P1n3appl3/ray/blob/master/todo.md&quot;&gt;quite a few things&lt;/a&gt; I didn’t get around to implementing because I ended up getting frustrated and put down the project. This was mostly due to the “fighting” with the borrow checker that all rust newcomers seem to face. In particular there’s a couple of patterns and datastructures that I’ve failed over and over again to write in rust. After revisiting it a few times in the past few months I’m still not sure how to do solve my problems nicely which is &lt;em&gt;incredibly&lt;/em&gt; discouraging, and it’s the main thing that’s kept me from going back and doing fun stuff like targeting web assembly.&lt;/p&gt;

&lt;p&gt;I won’t go into the details because I could write another post entirely about the minutiae of the issues I had but here’s the short version: my 3D scene contains things like shapes and textures. Those shapes are stored in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bounding_volume_hierarchy&quot;&gt;special tree datastructure&lt;/a&gt; for performance reasons, which is already a headache to write in rust. Shapes can share the same texture, so the model of making each object simply own all its information isn’t possible. Moreover, to avoid using globals all of the scene data is encapsulated in a monolithic object. The issue (well one of them at least) is that then the references between objects and meshes and textures make that &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; struct self-referential which is basically picking a fight with rustc. I’ve considered several solutions: using the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Pin&lt;/code&gt; trait to express that the scene can’t be moved around in memory, making the whole scene static, replacing references with indices into arrays to circumvent the borrow checker, trying to use raw pointers and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt;, and wrapping everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;Arc&lt;/code&gt;s. Some of those at least partially solve the problem, but the ones that do all seem like hacks and I can’t shake the feeling that I should be able do better.&lt;/p&gt;

&lt;p&gt;This complex tree with shared internal parts was also a pain in the butt to initialize immutably. I’m not sure if this is a shortcoming of rust or just my inexperience with the language, but I didn’t feel great spending hours figuring out how to construct stuff after reading a comparatively simple version in c++.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;I wasn’t explicitly collaborating with anyone, but when I had questions it was easy to find people willing to help on the community discord. Also it turns out that doing the Raytracer in One Weekend tutorial that I was following is somewhat of a popular project among new rustaceans. I found dozens, and eventually more than a hundred people doing the exact same thing and it was endlessly helpful to compare their approaches to my own. Not to belabor the &lt;a href=&quot;https://josephryan.me/rustaceans/&quot;&gt;point&lt;/a&gt;, but I’ve had nothing but positive interactions with the community and it’s one of the biggest motivators to do more rust stuff.&lt;/p&gt;

&lt;p&gt;I keep meaning to go back and do some more impressive renders now that I’ve got 3D meshes and colored dielectrics and stuff but I hope you’ve enjoyed the spheres and boxes!&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/cornell-600by600-f082f7.png&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/cornell-600by600-f082f7.png&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/cornell-600by600-f082f7.png&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/cornell-450by450-f082f7.png&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/cornell-525by300-f082f7.png&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/renders/cornell-350by200-f082f7.png&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/renders/cornell-350by200-f082f7.png&quot; class=&quot;center&quot; itemprop=&quot;image&quot; title=&quot;The classic&quot; /&gt;
  &lt;/picture&gt;</content><author><name></name></author><category term="rust" /><summary type="html">I’ve wanted to write a raytracer ever since I first learned what they were, and now I’ve finally done it! It would probably be more accurate to say that I copied a raytracer out of a book and translated it from c++ to rust, but that sounds far less fun than it actually was. At first it made me want to write about raytracing, but it turns out that there are like 50 years of literature on the subject and I kept finding things that were essentially what I wanted to write but better. If you’re interested in reading about it I’d recommend you try some of the things I read along the way. Also I haven’t been thinking too deeply about all the graphics stuff because of how little I know about the subject, it’s more like: read book chapter/blog post/academic paper -&amp;gt; implement thing I read about.</summary></entry><entry><title type="html">Trying out Arch</title><link href="https://josephryan.me/arch/" rel="alternate" type="text/html" title="Trying out Arch" /><published>2018-10-13T00:00:00+00:00</published><updated>2018-10-13T00:00:00+00:00</updated><id>https://josephryan.me/arch</id><content type="html" xml:base="https://josephryan.me/arch/">&lt;p&gt;A year ago I’d just started college and a bunch of things were changing for me, one of which was my laptop. After a pretty awful experience running linux in a VM because a robotics project required it, I took the plunge and dual booted Ubuntu. Up until that point my only linux experience was the bare minimum I needed to configure Raspberry Pis, so I was worried that it would be a jarring experience. However to my surprise Ubuntu was as user friendly as it gets; I don’t remember having any problems getting started. I think my favorite part was getting a proper package manager; having a homogeneous and reliable process for installing and updating software is a bigger deal than I’d realized.&lt;/p&gt;

&lt;p&gt;I was so happy with linux that I shrunk my Windows partition as much as possible (we used LabView for one of my courses and it wasn’t available for linux, so I couldn’t completely eradicate it). I also left Windows on my desktop because I use it for gaming, and being incompatible with games is one of the most common complaints I heard about Linux (the most common being driver support). I should mention that my roommate Vivek was going through pretty much the same process as me, a few steps ahead due to his prior experience with OSX. I got fairly comfortable with Ubuntu and moved on to other endeavors like learning Vim. Vivek was more interested in tinkering with his OS and soon he switched to Arch Linux.&lt;/p&gt;

&lt;p&gt;All I knew about Arch at that point was that it was a much more bare-bones distribution and it had a very involved user-base. I had all sorts of fun jeering Vivek as he struggled to make basic things work like controlling the GPU or making the laptop go to sleep, but as time went on he talked less about the ridiculous problems he had and more about the cool features and tools he was learning to use. Over the summer one of my coworkers (who coincidentally used to work at Canonical, the company behind Ubuntu) taught me more about the Linux ecosystem and introduced me to some other distros and OS’s. That was the tipping point for me, and when this semester started I decided I’d try something new. I narrowed the choices down to Arch and NixOS, but the latter isn’t as popular/well supported and Vivek wouldn’t be able to help me with it. So a few days ago (when I should have been studying) I opened up the Arch wiki and with Vivek holding my hand I managed to get up and running on a spare SSD in a single night. I used my desktop this time because I’ve been convinced that almost every game I play will run just fine on linux, and I didn’t want to interrupt my Ubuntu environment so I could still do my homework if things went south.&lt;/p&gt;

&lt;p&gt;Right off the bat the difference from Ubuntu was apparent. Instead of just running a GUI installer off a flash drive, I had to manually create and format partitions on the hard drive. Then I booted Arch from a flash drive and after setting up the filesystem on the SSD I jumped into it (honestly I still have no idea how this part worked, I typed &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; and voila now I’m running out of the other drive). I started setting up essential stuff like the bootloader and network configuration. I was surprised by how piecemeal the process seemed, at every step I could choose several programs to do a task with their own benefits and drawbacks. It was quite overwhelming to be presented with 15 packages that do the same basic function, with different levels of configurability, stability, performance, and elegance.&lt;/p&gt;

&lt;p&gt;Getting over the initial usability hump to get a shell, editor, and web browser running, took &lt;em&gt;much&lt;/em&gt; longer than with Ubuntu, but I kind of enjoyed the process. The “batteries not included” nature of Arch means that instead of having huge swaths of software installed by default, you have to build up your system piece by piece to get the functionality you want. This obviously takes more work, but means that you better understand your setup once you’ve got it working. That understanding has already helped me a few times when debugging. On Windows if an OS feature didn’t do what I wanted, I was powerless to change it. On Ubuntu there was a 50/50 chance that someone had posted a script or modification to a config file on stack overflow and an even lower chance that it actually worked for me. In Arch, through a combination of the &lt;em&gt;amazing&lt;/em&gt; documentation the community puts together and my enhanced understanding of my own system, I feel like I can actually &lt;em&gt;fix&lt;/em&gt; things! Seriously, the Arch wiki is an amazing resource not just for Arch but Linux as a whole. It’s invaluable especially when using new tools where the &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; option is too terse, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; page is too verbose.&lt;/p&gt;

&lt;p&gt;Yesterday when I noticed that the time in my status bar was wrong I consulted the wiki and was able to figure out the problem (incorrectly configured NTP client) with minimal frustration. In addition to the great documentation, I’m sure it helped that I had set up both the status bar and the underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; config myself. In addition to debugging, adding features is also a breeze compared to my previous setups. I wanted to set up screenshots and clips, so I checked the arch wiki for screen capture software (there are literally 19 listed packages not counting ones that do video) and picked a straightforward one called &lt;code class=&quot;highlighter-rouge&quot;&gt;maim&lt;/code&gt;. When ran it just captures the screen and either spits the png out over &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; or saves it to a file if you give it a path. I wanted to both save the picture &lt;em&gt;and&lt;/em&gt; copy it to my clipboard so I piped it to &lt;code class=&quot;highlighter-rouge&quot;&gt;tee ~/screenshots/$(date +%s).png&lt;/code&gt; and piped &lt;em&gt;that&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;xclip&lt;/code&gt; to put it in my clipboard. Finally I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;xev&lt;/code&gt; to find the id of my &lt;code class=&quot;highlighter-rouge&quot;&gt;PrnSc&lt;/code&gt; key, and added a binding in my window manager that ran the whole command when I pressed it. At this point I felt like a sorcerer and ate a piece of pumpkin bread to celebrate. The thing to note is that I didn’t just copy a one-liner off a forum and forget about it, I used separate programs (&lt;code class=&quot;highlighter-rouge&quot;&gt;maim&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tee&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xclip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xev&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bindsym&lt;/code&gt;) and composed them together to do my bidding. I’d always heard people touting that composability as Unix’s greatest feature, but I’m still so new to it that I don’t appreciate that all the time.&lt;/p&gt;

&lt;p&gt;Of course you could look at it another way: I just spent an hour replicating a feature that works out of the box in any respectable OS. That’s a fair point, but first of all it was fun :stuck_out_tongue_winking_eye:, and I also think knowing how it works has real benefits. After I got it working, it was easy to add a binding for “Shift+PrtSc” that let me select a region instead of capturing the whole screen. I distinctly remember in windows having to launch the snip tool, and in Ubuntu launching the screenshot tool and then picking the option for “select region”. I’m sure there are ways to do what I want in both cases, but when you’re provided with tools that mostly work, it takes a lot more motivation to modify them.&lt;/p&gt;

&lt;p&gt;At the end of the day, configurability is my favorite “feature” of Arch (well that and the AUR). I’m the kind of person who loves endlessly tweaking settings and the control that Arch gives me to do that is amazing. I’ve spent a dozen hours since installing it just picking and choosing different components to use for things like window management, notifications, status bar, program launching, etc. and there are still a few big kinks I need to iron out. After that there’s the never ending minutia of optimizing my workflow and making stuff look pretty. I’ll do another write up with the details of my configuration once it’s stable. Then maybe I can get back to you know… actually using my computer.&lt;/p&gt;</content><author><name></name></author><category term="arch" /><category term="linux" /><summary type="html">A year ago I’d just started college and a bunch of things were changing for me, one of which was my laptop. After a pretty awful experience running linux in a VM because a robotics project required it, I took the plunge and dual booted Ubuntu. Up until that point my only linux experience was the bare minimum I needed to configure Raspberry Pis, so I was worried that it would be a jarring experience. However to my surprise Ubuntu was as user friendly as it gets; I don’t remember having any problems getting started. I think my favorite part was getting a proper package manager; having a homogeneous and reliable process for installing and updating software is a bigger deal than I’d realized.</summary></entry><entry><title type="html">The Rust community rocks!</title><link href="https://josephryan.me/rustaceans/" rel="alternate" type="text/html" title="The Rust community rocks!" /><published>2018-07-21T00:00:00+00:00</published><updated>2018-07-21T00:00:00+00:00</updated><id>https://josephryan.me/rustaceans</id><content type="html" xml:base="https://josephryan.me/rustaceans/">&lt;p&gt;A couple of weeks ago my friend showed me &lt;a href=&quot;https://github.com/japaric/libm&quot;&gt;libm&lt;/a&gt;, a port of the math library from musl (a re-implementation of the C standard library) to “nostd” Rust which is just Rust with no external dependencies (even the standard library). The coolest part: it wasn’t written yet! The maintainer, @japaric had set up a bunch of “help wanted” and “good first issue” issues, and the tasks were fairly compartmentalized because each one involved porting a single math function like &lt;code class=&quot;highlighter-rouge&quot;&gt;atan2f&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt;. As someone who’s always been interested in open source software, but never actually contributed, it looked like a great opportunity and I got right to work.&lt;/p&gt;

&lt;p&gt;One of the hurdles to contributing to a project is the difficulty of setting up your environment, but a combination of japaric’s beginner friendly &lt;a href=&quot;https://github.com/japaric/libm/blob/master/CONTRIBUTING.md&quot;&gt;contributing gude&lt;/a&gt; and cargo being amazing made it a breeze. I uncommented one line of code and unit tests for the function I was working on magically appeared thanks to some &lt;a href=&quot;https://github.com/japaric/libm/blob/master/musl-generator/src/macros.rs&quot;&gt;macro magic&lt;/a&gt;. After fumbling around with my basic knowledge of Rust I finally got &lt;code class=&quot;highlighter-rouge&quot;&gt;fmod&lt;/code&gt; working and made a PR. Even though it had merge conflicts, I didn’t run &lt;code class=&quot;highlighter-rouge&quot;&gt;rustfmt&lt;/code&gt;, and I didn’t squash my commits, no one made fun of my incompetence. Japaric left helpful comments, and a few fixes later I had merged my code! High off that success I implemented more functions over the next few evenings, and there were enough other people contributing that within the week we had finished all but a few difficult functions. I’ve been checking in on it since, and it looks like it may get used in the &lt;code class=&quot;highlighter-rouge&quot;&gt;core&lt;/code&gt; crate.&lt;/p&gt;

&lt;p&gt;I always had this idea that open source contributors were superhuman programmers and it made me apprehensive about trying to do it myself, but my experience with libm has showed me that I had nothing to be afraid of. The largest factor that made the process so welcoming was the kindness of the rest of the contributors. For a self concious newbie like myself, I could have been scared away very easily by someone calling out my obvious inexperience while commenting on PRs. I hate that some of the most famous open source discourse out there is Torvalds yelling at people on the LKML. I realize how silly it sounds, but I was terrified of being made fun of for my numerous mistakes.&lt;/p&gt;

&lt;p&gt;I’ve heard great things about the Rust community, now I can say from firsthand experience that they were right. I joined the Rust Discord server and it’s been refreshing to watch a bunch of strangers on the internet treat each other with respect. Programming is a collaborative process, even when working by yourself you consult documentation and Stack Overflow so having a community that cares about each other isn’t just heartwarming, it’s productive. More people having their questions answered nicely means more people getting better at the language means more people contributing to open source. The Rust community seems to understand this well, the &lt;a href=&quot;https://this-week-in-rust.org/&quot;&gt;weekly newsletter&lt;/a&gt; has a list of open source projects that need help and are good for beginners.&lt;/p&gt;

&lt;p&gt;I can’t wait to jump back in and find another Rust project that wants help. In the meantime, since I can use complex math in nostd projects now thanks to libm, maybe I’ll go port &lt;a href=&quot;/cubefield&quot;&gt;cubefield&lt;/a&gt; to Rust.&lt;/p&gt;</content><author><name></name></author><category term="rust" /><summary type="html">A couple of weeks ago my friend showed me libm, a port of the math library from musl (a re-implementation of the C standard library) to “nostd” Rust which is just Rust with no external dependencies (even the standard library). The coolest part: it wasn’t written yet! The maintainer, @japaric had set up a bunch of “help wanted” and “good first issue” issues, and the tasks were fairly compartmentalized because each one involved porting a single math function like atan2f or pow. As someone who’s always been interested in open source software, but never actually contributed, it looked like a great opportunity and I got right to work.</summary></entry><entry><title type="html">So it begins…</title><link href="https://josephryan.me/first/" rel="alternate" type="text/html" title="So it begins..." /><published>2018-07-04T00:00:00+00:00</published><updated>2018-07-04T00:00:00+00:00</updated><id>https://josephryan.me/first</id><content type="html" xml:base="https://josephryan.me/first/">&lt;p&gt;I’ve spent the past few days learning about the jekyll ecosystem, and I think that I finally have a good enough lay of the land to get my site up and running. Trawling through the myriad of themes, plugins, and deployment methods is rather exhausting, so I’m going to document the process in hopes that I’ll never have to do it again.&lt;/p&gt;

&lt;h2 id=&quot;theme&quot;&gt;Theme&lt;/h2&gt;
&lt;p&gt;Because content is irrelevant and what really matters is having a neat looking website, the most important decision is choice of theme. I want something clean and dark, and after agonizing over a bunch of choices I’ve picked @sharu725’s &lt;a href=&quot;https://github.com/sharu725/dark-side&quot;&gt;dark-side&lt;/a&gt; theme. My other favorite from the ones I considered is &lt;a href=&quot;https://github.com/streetturtle/jekyll-clean-dark&quot;&gt;clean-dark&lt;/a&gt; by @streetturtle. The latter is definitely more full featured, but I want to be able to understand most of what’s going on in my site so I’m going with the simplest option that still looks good. The nice thing about understanding it is that I can tweak things. So far I’ve changed a few lines of css to make the accent color a nice shade of blue and altered the way that headers are rendered. I’m also trying to change the mobile tab color, but I can’t really test that until this goes live. (update: it works at least on android with chrome)&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;My theme came with disqus comments and google analytics built in. Any other features I want will come from the huge collection of jekyll plugins. The worst part is that there are usually several plugins that do the exact same thing, so I have to pay more attention to make sure I’m getting the most elegant/modern/working/featureful one.&lt;/p&gt;

&lt;h3 id=&quot;inline-code-highlighting&quot;&gt;Inline code highlighting&lt;/h3&gt;

&lt;p&gt;Jekyll already has support for syntax highlighting, however it forces all code to go in a new paragraph like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. Check out this really long line of text which hopefully wraps correctly on mobile or at least scrolls correctly!&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would be annoying if I had a bunch of short code snippets that I wanted to highlight, so I got a plugin that lets me do it like this instead: &lt;code class=&quot;highlight language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;. I wish I could just use backticks instead of liquid for code segments, and I may try to add that in the future.&lt;/p&gt;

&lt;h3 id=&quot;github--mentions&quot;&gt;Github @ mentions&lt;/h3&gt;

&lt;p&gt;I already used this one to mention the theme designers above. This way I can reference cool people like @jvns and @pervognsen with links to their github profiles instead of having to track down their personal sites.&lt;/p&gt;

&lt;h3 id=&quot;jemoji-pineapple&quot;&gt;Jemoji :pineapple:&lt;/h3&gt;

&lt;p&gt;This lets me specify emoji the same way you would in slack like :emoji-name:. Now I can express how angry I am about my favicon not displaying properly… :rage:. There’s also &lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;this nice gist&lt;/a&gt; that I can use to look up a specific one if I forget it.&lt;/p&gt;

&lt;h3 id=&quot;responsive-images&quot;&gt;Responsive images&lt;/h3&gt;

&lt;p&gt;I remember when working on my &lt;a href=&quot;https://web.archive.org/web/20180704224759/http://www.josephryan.me/&quot;&gt;old website&lt;/a&gt; it was a pain to optimize all my images. This plugin does all the resizing at build time so that you can spend less time watching a page load and more time looking at my cats:&lt;/p&gt;
&lt;picture&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-551by388-8c857e.jpg&quot; media=&quot;(min-width: 40em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 40em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-551by388-8c857e.jpg&quot; media=&quot;(min-width: 40em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-551by388-8c857e.jpg&quot; media=&quot;(min-width: 30em) and (-webkit-min-device-pixel-ratio: 1.5), (min-width: 30em) and (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-450by317-8c857e.jpg&quot; media=&quot;(min-width: 30em)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-525by300-8c857e.jpg&quot; media=&quot;(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)&quot; /&gt;
    &lt;source srcset=&quot;https://josephryan.me/generated/cats-350by200-8c857e.jpg&quot; /&gt;
    &lt;img src=&quot;https://josephryan.me/generated/cats-350by200-8c857e.jpg&quot; class=&quot;center&quot; itemprop=&quot;image&quot; alt=&quot;cats&quot; title=&quot;It also lets you add alt text!&quot; /&gt;
  &lt;/picture&gt;

&lt;h3 id=&quot;sitemap-and-feed&quot;&gt;Sitemap and feed&lt;/h3&gt;

&lt;p&gt;Apparently sitemap makes it easier for search engines to index the contents of the site, and it was trivial to add so why not. Same reasoning for the RSS feed, the plugin doesn’t need any configuration and there’s a chance it’ll be useful to someone.&lt;/p&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;There are a few other plugins I’ve played with and decided to leave out for now. I’ll list them here in case I change my mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll-time-to-read estimates reading time of a post&lt;/li&gt;
  &lt;li&gt;jekyll-timeago represents absolute dates relatively&lt;/li&gt;
  &lt;li&gt;jekyll-avatar shows github avatars&lt;/li&gt;
  &lt;li&gt;jekyll-algolia site-wide search&lt;/li&gt;
  &lt;li&gt;jekyll_indextank another search plugin&lt;/li&gt;
  &lt;li&gt;jekyll-target-blank opens links in a new tab&lt;/li&gt;
  &lt;li&gt;jekyll-gist embeds gists… duh&lt;/li&gt;
  &lt;li&gt;jekyll-asciinema take a wild guess&lt;/li&gt;
  &lt;li&gt;jekyll-youtube you get the idea&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;At first it sounds really cool that you can just push your markdown to github and let them handle all of the site generation, but then I realized that they (understandably)  won’t run 99% of plugins so they aren’t exposed to arbitrary code. I was about to resign myself to just generate it locally and push the entire static site to github, but someone (&lt;em&gt;cough&lt;/em&gt; @rrbutani &lt;em&gt;cough&lt;/em&gt;) told me about using Travis CI to build it, and who can resist the allure of free compute. It also can do nice things like blocking an update if you introduce broken links.&lt;/p&gt;

&lt;p&gt;Despite how much time I spent configuring everything, I’m still impressed by how easy it was to get a functional personal site that looks better than Stallman’s ever will. The best part is that the combination of jekyll + travis + disqus + github pages + namecheap’s edu program lets me run my site completely for free (I do have to pay for the domain after the free year is up but that’s like the cost of dinner for another year)&lt;/p&gt;</content><author><name></name></author><category term="meta" /><summary type="html">I’ve spent the past few days learning about the jekyll ecosystem, and I think that I finally have a good enough lay of the land to get my site up and running. Trawling through the myriad of themes, plugins, and deployment methods is rather exhausting, so I’m going to document the process in hopes that I’ll never have to do it again.</summary></entry></feed>